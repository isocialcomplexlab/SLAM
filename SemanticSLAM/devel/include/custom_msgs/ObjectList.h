// Generated by gencpp from file custom_msgs/ObjectList.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSGS_MESSAGE_OBJECTLIST_H
#define CUSTOM_MSGS_MESSAGE_OBJECTLIST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <custom_msgs/WorldObject.h>

namespace custom_msgs
{
template <class ContainerAllocator>
struct ObjectList_
{
  typedef ObjectList_<ContainerAllocator> Type;

  ObjectList_()
    : objects()
    , num(0)  {
    }
  ObjectList_(const ContainerAllocator& _alloc)
    : objects(_alloc)
    , num(0)  {
  (void)_alloc;
    }



   typedef std::vector< ::custom_msgs::WorldObject_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::custom_msgs::WorldObject_<ContainerAllocator> >> _objects_type;
  _objects_type objects;

   typedef int32_t _num_type;
  _num_type num;





  typedef boost::shared_ptr< ::custom_msgs::ObjectList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msgs::ObjectList_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectList_

typedef ::custom_msgs::ObjectList_<std::allocator<void> > ObjectList;

typedef boost::shared_ptr< ::custom_msgs::ObjectList > ObjectListPtr;
typedef boost::shared_ptr< ::custom_msgs::ObjectList const> ObjectListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msgs::ObjectList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msgs::ObjectList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_msgs::ObjectList_<ContainerAllocator1> & lhs, const ::custom_msgs::ObjectList_<ContainerAllocator2> & rhs)
{
  return lhs.objects == rhs.objects &&
    lhs.num == rhs.num;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_msgs::ObjectList_<ContainerAllocator1> & lhs, const ::custom_msgs::ObjectList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::ObjectList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::ObjectList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::ObjectList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::ObjectList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::ObjectList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::ObjectList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msgs::ObjectList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "07c3c607e5f4dbf042b5d6e6584e7e64";
  }

  static const char* value(const ::custom_msgs::ObjectList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x07c3c607e5f4dbf0ULL;
  static const uint64_t static_value2 = 0x42b5d6e6584e7e64ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msgs::ObjectList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msgs/ObjectList";
  }

  static const char* value(const ::custom_msgs::ObjectList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msgs::ObjectList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msgs/WorldObject[] objects\n"
"int32 num\n"
"================================================================================\n"
"MSG: custom_msgs/WorldObject\n"
"string objClass\n"
"float32 x\n"
"float32 y\n"
"float32 angle\n"
"float64 prob\n"
;
  }

  static const char* value(const ::custom_msgs::ObjectList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msgs::ObjectList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.objects);
      stream.next(m.num);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msgs::ObjectList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msgs::ObjectList_<ContainerAllocator>& v)
  {
    s << indent << "objects[]" << std::endl;
    for (size_t i = 0; i < v.objects.size(); ++i)
    {
      s << indent << "  objects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::custom_msgs::WorldObject_<ContainerAllocator> >::stream(s, indent + "    ", v.objects[i]);
    }
    s << indent << "num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSGS_MESSAGE_OBJECTLIST_H
